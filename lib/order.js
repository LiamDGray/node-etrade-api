
exports.listOrders = function(accountId,successCallback,errorCallback)
{
    //
    // From the etrade dev portal at 
    // https://us.etrade.com/ctnt/dev-portal/getDetail?contentUri=V0_Documentation-OrderAPI-ListOrders
    //
    
    var validationResult = this._validateAsString(accountId);
    if (!validationResult.valid)
        return errorCallback("The accountId parameter is invalid");
    
    var actionDescriptor = {
            method : "GET",
            module : "order",
            action : "orderlist/" + validationResult.value,
            useJSON: true,
    };
    
    this._run(actionDescriptor,{},successCallback,errorCallback);
};

exports.previewEquityOrder = function(params,successCallback,errorCallback)
{
    //
    // From the etrade dev portal at 
    // https://us.etrade.com/ctnt/dev-portal/getDetail?contentUri=V0_Documentation-OrderAPI-PreviewEquityOrder
    //
    // accountId          integer required    Numeric account ID
    // symbol             string  required    The market symbol for the security being bought or sold
    // orderAction        enum    required    The action that the broker is requested to perform. Possible values are:
    //                                             • BUY
    //                                             • SELL
    //                                             • BUY_TO_COVER
    //                                             • SELL_SHORT
    // clientOrderId      string  required    A reference number generated by the developer. Used to ensure that a duplicate order is not being submitted. It can be any value of 20 alphanumeric characters or less, but must be unique within this account. It does not appear in any API responses.
    // priceType          enum    required    The type of pricing. Possible values are:
    //                                             • MARKET
    //                                             • LIMIT
    //                                             • STOP
    //                                             • STOP_LIMIT
    //                                             • MARKET_ON_CLOSE
    //                                          If STOP, requires a stopPrice. If LIMIT, requires a limitPrice. If STOP_LIMIT equity order, requires both.
    // limitPrice         double  conditional The highest price at which to buy or the lowest price at which to sell if specified in a limit order. Required if priceType is LIMIT or STOP_LIMIT.
    // stopPrice          double  conditional The price at which to buy or sell if specified in a stop order. Required if priceType is STOP or STOP_LIMIT.
    // allOrNone          boolean optional    If TRUE, the transactions specified in the order must be executed all at once, or not at all. Default is FALSE.
    // quantity           integer required    The number of shares to buy or sell
    // reserveOrder       boolean optional    If set to TRUE, publicly displays only a limited number of shares (the reserve quantity), instead of the entire order, to avoid influencing other traders. Default is FALSE. If TRUE, must also specify the reserveQuantity.
    // reserveQuantity    integer conditional The number of shares to be publicly displayed if this is a reserve order. Required if reserveOrder is TRUE.
    // marketSession      enum    required    Session in which the equity order will be placed. Possible values are: REGULAR, EXTENDED.
    // orderTerm          enum    required    Specifies the term for which the order is in effect. Possible values are:
    //                                              • GOOD_UNTIL_CANCEL
    //                                              • GOOD_FOR_DAY
    //                                              • IMMEDIATE_OR_CANCEL (only for limit orders)
    //                                              • FILL_OR_KILL (only for limit orders)
    // routingDestination enum    optional    The exchange where the order should be executed. Users may want to specify this if they believe they can get a better order fill at a specific exchange, rather than relying on the automatic order routing system. Possible values are:
    //                                              • AUTO (default)
    //                                              • ARCA
    //                                              • NSDQ
    //                                              • NYSE

    
    if (!this.previewEquityOrderDescriptors)
    {
        var priceTypeIsStop = function(p) { return p.priceType == "STOP"; };
        var priceTypeIsStopLimit = function(p) { return p.priceType == "STOP_LIMIT"; };
        var priceTypeIsLimit = function(p) { return p.priceType == "LIMIT"; };
        
        this.previewEquityOrderDescriptors = this._buildParamsDescriptor([
           "accountId", true, this._validateAsInt.bind(this),
            "symbol",true, this._validateAsString.bind(this),
            "orderAction",true,this._validateAsOneOf(["BUY","SELL","BUY_TO_COVER","SELL_SHORT"]).bind(this),
            "clientOrderId",true,this._validateAsString.bind(this),
            "priceType",true,this._validateAsOneOf(["MARKET","LIMIT","STOP","STOP_LIMIT","MARKET_ON_CLOSE"]).bind(this),
            "limitPrice",function(p) { return priceTypeIsLimit(p) || priceTypeIsStopLimit(p); },this._validateAsFloat.bind(this),
            "stopPrice",function(p) { return priceTypeIsStop(p) || priceTypeIsStopLimit(p); }, this._validateAsFloat.bind(this),
            "allOrNone",false,this._validateAsBool.bind(this),
            "quantity",true,this._validateAsInt.bind(this),
            "reserveOrder",false,this._validateAsBool.bind(this),
            "reserveQuantity",function(p) { return p.reserveOrder; },this._validateAsInt.bind(this),
            "marketSession",true,this._validateAsOneOf(["REGULAR","EXTENDED"]).bind(this),
            "orderTerm",true,this._validateAsOneOf(["GOOD_UNTIL_CANCEL","GOOD_FOR_DAY","IMMEDIATE_OR_CANCEL","FILL_OR_KILL"]).bind(this),
            "routingDestination",false,this._validateAsOneOf(["AUTO","ARCA","NSDQ","NYSE"]).bind(this),
        ]);
    }
    
    var validationResult = this._validateParams(this.previewEquityOrderDescriptors,params);
    if (validationResult.length)
        return errorCallback(validationResult); // Validation failed

    var actionDescriptor = {
            method : "POST",
            module : "order",
            action : "previewequityorder",
            useJSON: true,
    };

    var wrappedParams = { PreviewEquityOrder : { "-xmlns": "http://order.etws.etrade.com", EquityOrderRequest:params }};
    
    this._run(actionDescriptor,wrappedParams,successCallback,errorCallback);
};


